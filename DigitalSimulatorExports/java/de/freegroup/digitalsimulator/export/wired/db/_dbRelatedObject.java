package de.freegroup.digitalsimulator.export.wired.db;

/**
 * Class generated by automatic ClassGenerator
 * Date: Mon Feb 02 16:30:54 CET 2004
 */
import de.freegroup.digitalsimulator.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;
import de.freegroup.digitalsimulator.Trace;

class _dbRelatedObject extends dbObject 
{

	String    masterObject_id;	// Foreign Key pointing to Table [ElectricObject], Field [id]
	String    id;	// Key
	String    relatedObject_id;	// Foreign Key pointing to Table [ElectricObject], Field [id]


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRelatedObject.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM RelatedObject WHERE id='"+_key+"'");
					result = true;
					id     = null;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}



	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getMasterObject()
	 * Description: 
	 * Returns:     ElectricObject
	 */
	public ElectricObject getMasterObject()
	{
		return ElectricObject.findById(masterObject_id);
	}

	/**
	 * Method:      setMasterObject()
	 * Description: 
	 * Returns:     void
	 */
	public void setMasterObject(ElectricObject _foreigner, boolean _autocommit)
	{
		masterObject_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 * Method:      getRelatedObject()
	 * Description: 
	 * Returns:     ElectricObject
	 */
	public ElectricObject getRelatedObject()
	{
		return ElectricObject.findById(relatedObject_id);
	}

	/**
	 * Method:      setRelatedObject()
	 * Description: 
	 * Returns:     void
	 */
	public void setRelatedObject(ElectricObject _foreigner, boolean _autocommit)
	{
		relatedObject_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      getMacroPinMappings()
	 *  Description:                              
	 *  Returns:     ArrayList<MacroPinMapping>
	 */
	public ArrayList getMacroPinMappings()
	{
		return _dbMacroPinMapping.findByRelatedObject(this);
	}


	/**
	 *  Method:      findByMasterObject(_dbElectricObject _masterObject)
	 *  Description: 
	 *  Returns:     ArrayList<RelatedObject>
	 */
	public static ArrayList findByMasterObject(_dbElectricObject _masterObject)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRelatedObject.findByMasterObject");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT masterObject_id, id, relatedObject_id FROM RelatedObject WHERE masterObject_id='"+toSQL(((_masterObject==null)?"":_masterObject.getId()))+"'");
				while(s.next())
				{
					RelatedObject newObject = new RelatedObject();
					newObject.masterObject_id=s.getString(1);
					newObject.id=s.getString(2);
					newObject.relatedObject_id=s.getString(3);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     RelatedObject
	 */
	public static RelatedObject findById(String _id)
	{
		RelatedObject result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRelatedObject.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT masterObject_id, id, relatedObject_id FROM RelatedObject WHERE id='"+toSQL(_id)+"'");
				if(s.next())
				{
					result = new RelatedObject();
					result.masterObject_id= s.getString(1);
					result.id= s.getString(2);
					result.relatedObject_id= s.getString(3);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByRelatedObject(_dbElectricObject _relatedObject)
	 *  Description: 
	 *  Returns:     ArrayList<RelatedObject>
	 */
	public static ArrayList findByRelatedObject(_dbElectricObject _relatedObject)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRelatedObject.findByRelatedObject");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT masterObject_id, id, relatedObject_id FROM RelatedObject WHERE relatedObject_id='"+toSQL(((_relatedObject==null)?"":_relatedObject.getId()))+"'");
				while(s.next())
				{
					RelatedObject newObject = new RelatedObject();
					newObject.masterObject_id=s.getString(1);
					newObject.id=s.getString(2);
					newObject.relatedObject_id=s.getString(3);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRelatedObject.commit");
			try
			{
				stmt.executeUpdate( "UPDATE RelatedObject set masterObject_id= '"+toSQL(masterObject_id)+"', relatedObject_id= '"+toSQL(relatedObject_id)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return true;
	}


	/**
	 * returns ArrayList<RelatedObject>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRelatedObject.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT masterObject_id, id, relatedObject_id FROM RelatedObject");
				while(s.next())
				{
					RelatedObject newObject = new RelatedObject();
					newObject.masterObject_id=s.getString(1);
					newObject.id=s.getString(2);
					newObject.relatedObject_id=s.getString(3);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public RelatedObject createInstance( _dbElectricObject _masterObject, _dbElectricObject _relatedObject )
	{
		RelatedObject result = null;
		SaveStatement  stmt;

		if(_masterObject==null || _relatedObject==null)
		  throw new NullPointerException("One of the related object is null _masterObject="+_masterObject+"  _relatedObject="+_relatedObject);
		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRelatedObject.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO RelatedObject ( masterObject_id, id, relatedObject_id) VALUES ( '"+((_masterObject==null)?"":_masterObject.getId())+"', '"+nextGUID+"',  '"+((_relatedObject==null)?"":_relatedObject.getId())+"')");
				result = new RelatedObject();
				result.masterObject_id= (_masterObject==null)?"":_masterObject.getId();
				result.id= nextGUID;
				result.relatedObject_id= (_relatedObject==null)?"":_relatedObject.getId();
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( _dbElectricObject _masterObject, _dbElectricObject _relatedObject )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRelatedObject.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO RelatedObject ( masterObject_id, id, relatedObject_id) VALUES ( '"+((_masterObject==null)?"":_masterObject.getId())+"', '"+nextGUID+"',  '"+((_relatedObject==null)?"":_relatedObject.getId())+"')");
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRelatedObject.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM RelatedObject WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRelatedObject.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from RelatedObject" );
					result = true;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(masterObject_id);
		result.append("|");
		result.append(id);
		result.append("|");
		result.append(relatedObject_id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
	}


}
