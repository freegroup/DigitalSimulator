package de.freegroup.digitalsimulator.export.wired.db;

/**
 * Class generated by automatic ClassGenerator
 * Date: Mon Feb 02 16:30:54 CET 2004
 */
import de.freegroup.digitalsimulator.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;
import de.freegroup.digitalsimulator.Trace;

class _dbElectricCase extends dbObject 
{

	int       width;
	int       height;
	int       y;
	String    caseLayout_id;	// Foreign Key pointing to Table [CaseLayout], Field [id]
	String    name;
	int       x;
	String    descriptionURL;
	String    id;	// Key
	String    iconName;


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM ElectricCase WHERE id='"+_key+"'");
					result = true;
					id     = null;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}



	/**
	 * Method:      getWidth()
	 * Description: 
	 * Returns:     int
	 */
	public int getWidth()
	{
		return width;
	}

	/**
	 * Method:      setWidth(int _width, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setWidth(int _width, boolean _autoCommit)
	{
		width=_width;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getHeight()
	 * Description: 
	 * Returns:     int
	 */
	public int getHeight()
	{
		return height;
	}

	/**
	 * Method:      setHeight(int _height, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setHeight(int _height, boolean _autoCommit)
	{
		height=_height;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getY()
	 * Description: 
	 * Returns:     int
	 */
	public int getY()
	{
		return y;
	}

	/**
	 * Method:      setY(int _y, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setY(int _y, boolean _autoCommit)
	{
		y=_y;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getName()
	 * Description: 
	 * Returns:     String
	 */
	public String getName()
	{
		return name;
	}

	/**
	 * Method:      setName(String _name, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setName(String _name, boolean _autoCommit)
	{
		name=_name;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getX()
	 * Description: 
	 * Returns:     int
	 */
	public int getX()
	{
		return x;
	}

	/**
	 * Method:      setX(int _x, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setX(int _x, boolean _autoCommit)
	{
		x=_x;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getDescriptionURL()
	 * Description: 
	 * Returns:     String
	 */
	public String getDescriptionURL()
	{
		return descriptionURL;
	}

	/**
	 * Method:      setDescriptionURL(String _descriptionURL, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setDescriptionURL(String _descriptionURL, boolean _autoCommit)
	{
		descriptionURL=_descriptionURL;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getIconName()
	 * Description: 
	 * Returns:     String
	 */
	public String getIconName()
	{
		return iconName;
	}

	/**
	 * Method:      setIconName(String _iconName, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setIconName(String _iconName, boolean _autoCommit)
	{
		iconName=_iconName;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getCaseLayout()
	 * Description: 
	 * Returns:     CaseLayout
	 */
	public CaseLayout getCaseLayout()
	{
		return CaseLayout.findById(caseLayout_id);
	}

	/**
	 * Method:      setCaseLayout()
	 * Description: 
	 * Returns:     void
	 */
	public void setCaseLayout(CaseLayout _foreigner, boolean _autocommit)
	{
		caseLayout_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      getCaseDependencies()
	 *  Description:                              
	 *  Returns:     ArrayList<CaseDependency>
	 */
	public ArrayList getCaseDependencies()
	{
		return _dbCaseDependency.findByElectricCase(this);
	}


	/**
	 *  Method:      getObject2Cases()
	 *  Description:                              
	 *  Returns:     ArrayList<Object2Case>
	 */
	public ArrayList getObject2Cases()
	{
		return _dbObject2Case.findByElectricCase(this);
	}


	/**
	 *  Method:      findByWidth(int _width)
	 *  Description: 
	 *  Returns:     ArrayList<ElectricCase>
	 */
	public static ArrayList findByWidth(int _width)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.findByWidth");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT width, height, y, caseLayout_id, name, x, descriptionURL, id, iconName FROM ElectricCase WHERE width="+_width);
				while(s.next())
				{
					ElectricCase newObject = new ElectricCase();
					newObject.width=s.getInt(1);
					newObject.height=s.getInt(2);
					newObject.y=s.getInt(3);
					newObject.caseLayout_id=s.getString(4);
					newObject.name=s.getString(5);
					newObject.x=s.getInt(6);
					newObject.descriptionURL=s.getString(7);
					newObject.id=s.getString(8);
					newObject.iconName=s.getString(9);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByHeight(int _height)
	 *  Description: 
	 *  Returns:     ArrayList<ElectricCase>
	 */
	public static ArrayList findByHeight(int _height)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.findByHeight");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT width, height, y, caseLayout_id, name, x, descriptionURL, id, iconName FROM ElectricCase WHERE height="+_height);
				while(s.next())
				{
					ElectricCase newObject = new ElectricCase();
					newObject.width=s.getInt(1);
					newObject.height=s.getInt(2);
					newObject.y=s.getInt(3);
					newObject.caseLayout_id=s.getString(4);
					newObject.name=s.getString(5);
					newObject.x=s.getInt(6);
					newObject.descriptionURL=s.getString(7);
					newObject.id=s.getString(8);
					newObject.iconName=s.getString(9);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByY(int _y)
	 *  Description: 
	 *  Returns:     ArrayList<ElectricCase>
	 */
	public static ArrayList findByY(int _y)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.findByY");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT width, height, y, caseLayout_id, name, x, descriptionURL, id, iconName FROM ElectricCase WHERE y="+_y);
				while(s.next())
				{
					ElectricCase newObject = new ElectricCase();
					newObject.width=s.getInt(1);
					newObject.height=s.getInt(2);
					newObject.y=s.getInt(3);
					newObject.caseLayout_id=s.getString(4);
					newObject.name=s.getString(5);
					newObject.x=s.getInt(6);
					newObject.descriptionURL=s.getString(7);
					newObject.id=s.getString(8);
					newObject.iconName=s.getString(9);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByCaseLayout(_dbCaseLayout _caseLayout)
	 *  Description: 
	 *  Returns:     ElectricCase
	 */
	public static ElectricCase findByCaseLayout(_dbCaseLayout _caseLayout)
	{
		ElectricCase result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.findByCaseLayout");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT width, height, y, caseLayout_id, name, x, descriptionURL, id, iconName FROM ElectricCase WHERE caseLayout_id='"+toSQL(((_caseLayout==null)?"":_caseLayout.getId()))+"'");
				if(s.next())
				{
					result = new ElectricCase();
					result.width= s.getInt(1);
					result.height= s.getInt(2);
					result.y= s.getInt(3);
					result.caseLayout_id= s.getString(4);
					result.name= s.getString(5);
					result.x= s.getInt(6);
					result.descriptionURL= s.getString(7);
					result.id= s.getString(8);
					result.iconName= s.getString(9);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByName(String _name)
	 *  Description: 
	 *  Returns:     ArrayList<ElectricCase>
	 */
	public static ArrayList findByName(String _name)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.findByName");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT width, height, y, caseLayout_id, name, x, descriptionURL, id, iconName FROM ElectricCase WHERE name='"+toSQL(_name)+"'");
				while(s.next())
				{
					ElectricCase newObject = new ElectricCase();
					newObject.width=s.getInt(1);
					newObject.height=s.getInt(2);
					newObject.y=s.getInt(3);
					newObject.caseLayout_id=s.getString(4);
					newObject.name=s.getString(5);
					newObject.x=s.getInt(6);
					newObject.descriptionURL=s.getString(7);
					newObject.id=s.getString(8);
					newObject.iconName=s.getString(9);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByX(int _x)
	 *  Description: 
	 *  Returns:     ArrayList<ElectricCase>
	 */
	public static ArrayList findByX(int _x)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.findByX");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT width, height, y, caseLayout_id, name, x, descriptionURL, id, iconName FROM ElectricCase WHERE x="+_x);
				while(s.next())
				{
					ElectricCase newObject = new ElectricCase();
					newObject.width=s.getInt(1);
					newObject.height=s.getInt(2);
					newObject.y=s.getInt(3);
					newObject.caseLayout_id=s.getString(4);
					newObject.name=s.getString(5);
					newObject.x=s.getInt(6);
					newObject.descriptionURL=s.getString(7);
					newObject.id=s.getString(8);
					newObject.iconName=s.getString(9);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByDescriptionURL(String _descriptionURL)
	 *  Description: 
	 *  Returns:     ArrayList<ElectricCase>
	 */
	public static ArrayList findByDescriptionURL(String _descriptionURL)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.findByDescriptionURL");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT width, height, y, caseLayout_id, name, x, descriptionURL, id, iconName FROM ElectricCase WHERE descriptionURL='"+toSQL(_descriptionURL)+"'");
				while(s.next())
				{
					ElectricCase newObject = new ElectricCase();
					newObject.width=s.getInt(1);
					newObject.height=s.getInt(2);
					newObject.y=s.getInt(3);
					newObject.caseLayout_id=s.getString(4);
					newObject.name=s.getString(5);
					newObject.x=s.getInt(6);
					newObject.descriptionURL=s.getString(7);
					newObject.id=s.getString(8);
					newObject.iconName=s.getString(9);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     ElectricCase
	 */
	public static ElectricCase findById(String _id)
	{
		ElectricCase result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT width, height, y, caseLayout_id, name, x, descriptionURL, id, iconName FROM ElectricCase WHERE id='"+toSQL(_id)+"'");
				if(s.next())
				{
					result = new ElectricCase();
					result.width= s.getInt(1);
					result.height= s.getInt(2);
					result.y= s.getInt(3);
					result.caseLayout_id= s.getString(4);
					result.name= s.getString(5);
					result.x= s.getInt(6);
					result.descriptionURL= s.getString(7);
					result.id= s.getString(8);
					result.iconName= s.getString(9);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByIconName(String _iconName)
	 *  Description: 
	 *  Returns:     ArrayList<ElectricCase>
	 */
	public static ArrayList findByIconName(String _iconName)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.findByIconName");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT width, height, y, caseLayout_id, name, x, descriptionURL, id, iconName FROM ElectricCase WHERE iconName='"+toSQL(_iconName)+"'");
				while(s.next())
				{
					ElectricCase newObject = new ElectricCase();
					newObject.width=s.getInt(1);
					newObject.height=s.getInt(2);
					newObject.y=s.getInt(3);
					newObject.caseLayout_id=s.getString(4);
					newObject.name=s.getString(5);
					newObject.x=s.getInt(6);
					newObject.descriptionURL=s.getString(7);
					newObject.id=s.getString(8);
					newObject.iconName=s.getString(9);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.commit");
			try
			{
				stmt.executeUpdate( "UPDATE ElectricCase set width= "+width+", height= "+height+", y= "+y+", caseLayout_id= '"+toSQL(caseLayout_id)+"', name= '"+toSQL(name)+"', x= "+x+", descriptionURL= '"+toSQL(descriptionURL)+"', iconName= '"+toSQL(iconName)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return true;
	}


	/**
	 * returns ArrayList<ElectricCase>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT width, height, y, caseLayout_id, name, x, descriptionURL, id, iconName FROM ElectricCase");
				while(s.next())
				{
					ElectricCase newObject = new ElectricCase();
					newObject.width=s.getInt(1);
					newObject.height=s.getInt(2);
					newObject.y=s.getInt(3);
					newObject.caseLayout_id=s.getString(4);
					newObject.name=s.getString(5);
					newObject.x=s.getInt(6);
					newObject.descriptionURL=s.getString(7);
					newObject.id=s.getString(8);
					newObject.iconName=s.getString(9);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public ElectricCase createInstance( int  _width, int  _height, int  _y, _dbCaseLayout _caseLayout, String  _name, int  _x, String  _descriptionURL, String  _iconName )
	{
		ElectricCase result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO ElectricCase ( width, height, y, caseLayout_id, name, x, descriptionURL, id, iconName) VALUES ("+_width+", "+_height+", "+_y+",  '"+((_caseLayout==null)?"":_caseLayout.getId())+"',  '"+toSQL(_name)+"', "+_x+",  '"+toSQL(_descriptionURL)+"', '"+nextGUID+"',  '"+toSQL(_iconName)+"')");
				result = new ElectricCase();
				result.width= _width;
				result.height= _height;
				result.y= _y;
				result.caseLayout_id= (_caseLayout==null)?"":_caseLayout.getId();
				result.name= _name;
				result.x= _x;
				result.descriptionURL= _descriptionURL;
				result.id= nextGUID;
				result.iconName= _iconName;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( int  _width, int  _height, int  _y, _dbCaseLayout _caseLayout, String  _name, int  _x, String  _descriptionURL, String  _iconName )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO ElectricCase ( width, height, y, caseLayout_id, name, x, descriptionURL, id, iconName) VALUES ("+_width+", "+_height+", "+_y+",  '"+((_caseLayout==null)?"":_caseLayout.getId())+"',  '"+toSQL(_name)+"', "+_x+",  '"+toSQL(_descriptionURL)+"', '"+nextGUID+"',  '"+toSQL(_iconName)+"')");
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM ElectricCase WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from ElectricCase" );
					result = true;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 * init the class
	 */
	static
	{
	}


  /**
   * toString methode: creates a String representation of the object
   * @return the String representation
   * @author info.vancauwenberge.tostring plugin
  
   */
  public String toString()
  {
    StringBuffer buffer = new StringBuffer();
    buffer.append("_dbElectricCase[");
    buffer.append("width = ").append(width);
    buffer.append(", height = ").append(height);
    buffer.append(", y = ").append(y);
    buffer.append(", caseLayout_id = ").append(caseLayout_id);
    buffer.append(", name = ").append(name);
    buffer.append(", x = ").append(x);
    buffer.append(", descriptionURL = ").append(descriptionURL);
    buffer.append(", id = ").append(id);
    buffer.append(", iconName = ").append(iconName);
    buffer.append("]");
    return buffer.toString();
  }
}
