package de.freegroup.digitalsimulator.export.wired.db;

/**
 * Class generated by automatic ClassGenerator
 * Date: Mon Feb 02 16:30:54 CET 2004
 */
import de.freegroup.digitalsimulator.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;
import de.freegroup.digitalsimulator.Trace;

class _dbElectricObject extends dbObject 
{

	int       width;
	int       isSingelton;
	int       height;
	String    type;
	int       y;
	int       x;
	String    id;	// Key
	String    objectLayout_id;	// Foreign Key pointing to Table [ObjectLayout], Field [id]


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM ElectricObject WHERE id='"+_key+"'");
					result = true;
					id     = null;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}



	/**
	 * Method:      getWidth()
	 * Description: 
	 * Returns:     int
	 */
	public int getWidth()
	{
		return width;
	}

	/**
	 * Method:      setWidth(int _width, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setWidth(int _width, boolean _autoCommit)
	{
		width=_width;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getIsSingelton()
	 * Description: 
	 * Returns:     int
	 */
	public int getIsSingelton()
	{
		return isSingelton;
	}

	/**
	 * Method:      setIsSingelton(int _isSingelton, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setIsSingelton(int _isSingelton, boolean _autoCommit)
	{
		isSingelton=_isSingelton;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getHeight()
	 * Description: 
	 * Returns:     int
	 */
	public int getHeight()
	{
		return height;
	}

	/**
	 * Method:      setHeight(int _height, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setHeight(int _height, boolean _autoCommit)
	{
		height=_height;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getType()
	 * Description: 
	 * Returns:     String
	 */
	public String getType()
	{
		return type;
	}

	/**
	 * Method:      setType(String _type, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setType(String _type, boolean _autoCommit)
	{
		type=_type;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getY()
	 * Description: 
	 * Returns:     int
	 */
	public int getY()
	{
		return y;
	}

	/**
	 * Method:      setY(int _y, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setY(int _y, boolean _autoCommit)
	{
		y=_y;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getX()
	 * Description: 
	 * Returns:     int
	 */
	public int getX()
	{
		return x;
	}

	/**
	 * Method:      setX(int _x, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setX(int _x, boolean _autoCommit)
	{
		x=_x;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getObjectLayout()
	 * Description: 
	 * Returns:     ObjectLayout
	 */
	public ObjectLayout getObjectLayout()
	{
		return ObjectLayout.findById(objectLayout_id);
	}

	/**
	 * Method:      setObjectLayout()
	 * Description: 
	 * Returns:     void
	 */
	public void setObjectLayout(ObjectLayout _foreigner, boolean _autocommit)
	{
		objectLayout_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      getCaseDependencies()
	 *  Description:                              
	 *  Returns:     ArrayList<CaseDependency>
	 */
	public ArrayList getCaseDependencies()
	{
		return _dbCaseDependency.findByObject(this);
	}


	/**
	 *  Method:      getMacroPinMappings()
	 *  Description:                              
	 *  Returns:     ArrayList<MacroPinMapping>
	 */
	public ArrayList getMacroPinMappings()
	{
		return _dbMacroPinMapping.findByElectricObject(this);
	}


	/**
	 *  Method:      getObject2Cases()
	 *  Description:                              
	 *  Returns:     ArrayList<Object2Case>
	 */
	public ArrayList getObject2Cases()
	{
		return _dbObject2Case.findByObject(this);
	}


	/**
	 *  Method:      findByWidth(int _width)
	 *  Description: 
	 *  Returns:     ArrayList<ElectricObject>
	 */
	public static ArrayList findByWidth(int _width)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.findByWidth");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT width, isSingelton, height, type, y, x, id, objectLayout_id FROM ElectricObject WHERE width="+_width);
				while(s.next())
				{
					ElectricObject newObject = new ElectricObject();
					newObject.width=s.getInt(1);
					newObject.isSingelton=s.getInt(2);
					newObject.height=s.getInt(3);
					newObject.type=s.getString(4);
					newObject.y=s.getInt(5);
					newObject.x=s.getInt(6);
					newObject.id=s.getString(7);
					newObject.objectLayout_id=s.getString(8);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByIsSingelton(int _isSingelton)
	 *  Description: 
	 *  Returns:     ArrayList<ElectricObject>
	 */
	public static ArrayList findByIsSingelton(int _isSingelton)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.findByIsSingelton");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT width, isSingelton, height, type, y, x, id, objectLayout_id FROM ElectricObject WHERE isSingelton="+_isSingelton);
				while(s.next())
				{
					ElectricObject newObject = new ElectricObject();
					newObject.width=s.getInt(1);
					newObject.isSingelton=s.getInt(2);
					newObject.height=s.getInt(3);
					newObject.type=s.getString(4);
					newObject.y=s.getInt(5);
					newObject.x=s.getInt(6);
					newObject.id=s.getString(7);
					newObject.objectLayout_id=s.getString(8);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByHeight(int _height)
	 *  Description: 
	 *  Returns:     ArrayList<ElectricObject>
	 */
	public static ArrayList findByHeight(int _height)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.findByHeight");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT width, isSingelton, height, type, y, x, id, objectLayout_id FROM ElectricObject WHERE height="+_height);
				while(s.next())
				{
					ElectricObject newObject = new ElectricObject();
					newObject.width=s.getInt(1);
					newObject.isSingelton=s.getInt(2);
					newObject.height=s.getInt(3);
					newObject.type=s.getString(4);
					newObject.y=s.getInt(5);
					newObject.x=s.getInt(6);
					newObject.id=s.getString(7);
					newObject.objectLayout_id=s.getString(8);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByType(String _type)
	 *  Description: 
	 *  Returns:     ElectricObject
	 */
	public static ElectricObject findByType(String _type)
	{
		ElectricObject result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.findByType");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT width, isSingelton, height, type, y, x, id, objectLayout_id FROM ElectricObject WHERE type='"+toSQL(_type)+"'");
				if(s.next())
				{
					result = new ElectricObject();
					result.width= s.getInt(1);
					result.isSingelton= s.getInt(2);
					result.height= s.getInt(3);
					result.type= s.getString(4);
					result.y= s.getInt(5);
					result.x= s.getInt(6);
					result.id= s.getString(7);
					result.objectLayout_id= s.getString(8);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByY(int _y)
	 *  Description: 
	 *  Returns:     ArrayList<ElectricObject>
	 */
	public static ArrayList findByY(int _y)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.findByY");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT width, isSingelton, height, type, y, x, id, objectLayout_id FROM ElectricObject WHERE y="+_y);
				while(s.next())
				{
					ElectricObject newObject = new ElectricObject();
					newObject.width=s.getInt(1);
					newObject.isSingelton=s.getInt(2);
					newObject.height=s.getInt(3);
					newObject.type=s.getString(4);
					newObject.y=s.getInt(5);
					newObject.x=s.getInt(6);
					newObject.id=s.getString(7);
					newObject.objectLayout_id=s.getString(8);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByX(int _x)
	 *  Description: 
	 *  Returns:     ArrayList<ElectricObject>
	 */
	public static ArrayList findByX(int _x)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.findByX");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT width, isSingelton, height, type, y, x, id, objectLayout_id FROM ElectricObject WHERE x="+_x);
				while(s.next())
				{
					ElectricObject newObject = new ElectricObject();
					newObject.width=s.getInt(1);
					newObject.isSingelton=s.getInt(2);
					newObject.height=s.getInt(3);
					newObject.type=s.getString(4);
					newObject.y=s.getInt(5);
					newObject.x=s.getInt(6);
					newObject.id=s.getString(7);
					newObject.objectLayout_id=s.getString(8);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     ElectricObject
	 */
	public static ElectricObject findById(String _id)
	{
		ElectricObject result = null;
		SaveStatement  stmt;

		if(_id==null || _id.length()==0)
		{
		  Trace.error("_id is null.");
		  Trace.error(new Exception());
		  return null;
		}
		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT width, isSingelton, height, type, y, x, id, objectLayout_id FROM ElectricObject WHERE id='"+toSQL(_id)+"'");
				if(s.next())
				{
					result = new ElectricObject();
					result.width= s.getInt(1);
					result.isSingelton= s.getInt(2);
					result.height= s.getInt(3);
					result.type= s.getString(4);
					result.y= s.getInt(5);
					result.x= s.getInt(6);
					result.id= s.getString(7);
					result.objectLayout_id= s.getString(8);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByObjectLayout(_dbObjectLayout _objectLayout)
	 *  Description: 
	 *  Returns:     ElectricObject
	 */
	public static ElectricObject findByObjectLayout(_dbObjectLayout _objectLayout)
	{
		ElectricObject result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.findByObjectLayout");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT width, isSingelton, height, type, y, x, id, objectLayout_id FROM ElectricObject WHERE objectLayout_id='"+toSQL(((_objectLayout==null)?"":_objectLayout.getId()))+"'");
				if(s.next())
				{
					result = new ElectricObject();
					result.width= s.getInt(1);
					result.isSingelton= s.getInt(2);
					result.height= s.getInt(3);
					result.type= s.getString(4);
					result.y= s.getInt(5);
					result.x= s.getInt(6);
					result.id= s.getString(7);
					result.objectLayout_id= s.getString(8);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.commit");
			try
			{
				stmt.executeUpdate( "UPDATE ElectricObject set width= "+width+", isSingelton= "+isSingelton+", height= "+height+", type= '"+toSQL(type)+"', y= "+y+", x= "+x+", objectLayout_id= '"+toSQL(objectLayout_id)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return true;
	}


	/**
	 * returns ArrayList<ElectricObject>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT width, isSingelton, height, type, y, x, id, objectLayout_id FROM ElectricObject");
				while(s.next())
				{
					ElectricObject newObject = new ElectricObject();
					newObject.width=s.getInt(1);
					newObject.isSingelton=s.getInt(2);
					newObject.height=s.getInt(3);
					newObject.type=s.getString(4);
					newObject.y=s.getInt(5);
					newObject.x=s.getInt(6);
					newObject.id=s.getString(7);
					newObject.objectLayout_id=s.getString(8);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public ElectricObject createInstance( int  _width, int  _isSingelton, int  _height, String  _type, int  _y, int  _x, _dbObjectLayout _objectLayout )
	{
		ElectricObject result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO ElectricObject ( width, isSingelton, height, type, y, x, id, objectLayout_id) VALUES ("+_width+", "+_isSingelton+", "+_height+",  '"+toSQL(_type)+"', "+_y+", "+_x+", '"+nextGUID+"',  '"+((_objectLayout==null)?"":_objectLayout.getId())+"')");
				result = new ElectricObject();
				result.width= _width;
				result.isSingelton= _isSingelton;
				result.height= _height;
				result.type= _type;
				result.y= _y;
				result.x= _x;
				result.id= nextGUID;
				result.objectLayout_id= (_objectLayout==null)?"":_objectLayout.getId();
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( int  _width, int  _isSingelton, int  _height, String  _type, int  _y, int  _x, _dbObjectLayout _objectLayout )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO ElectricObject ( width, isSingelton, height, type, y, x, id, objectLayout_id) VALUES ("+_width+", "+_isSingelton+", "+_height+",  '"+toSQL(_type)+"', "+_y+", "+_x+", '"+nextGUID+"',  '"+((_objectLayout==null)?"":_objectLayout.getId())+"')");
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM ElectricObject WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from ElectricObject" );
					result = true;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 * init the class
	 */
	static
	{
	}


  /**
   * toString methode: creates a String representation of the object
   * @return the String representation
   * @author info.vancauwenberge.tostring plugin
  
   */
  public String toString()
  {
    StringBuffer buffer = new StringBuffer();
    buffer.append("_dbElectricObject[");
    buffer.append("width = ").append(width);
    buffer.append(", isSingelton = ").append(isSingelton);
    buffer.append(", height = ").append(height);
    buffer.append(", type = ").append(type);
    buffer.append(", y = ").append(y);
    buffer.append(", x = ").append(x);
    buffer.append(", id = ").append(id);
    buffer.append(", objectLayout_id = ").append(objectLayout_id);
    buffer.append("]");
    return buffer.toString();
  }
}
