package de.freegroup.digitalsimulator.export.wired.db;

/**
 * Class generated by automatic ClassGenerator
 * Date: Wed Feb 27 17:58:17 GMT+01:00 2002
 */
import de.freegroup.digitalsimulator.Trace;
import de.freegroup.digitalsimulator.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;

public class Object2Case extends _dbObject2Case
{
   ArrayList      currentObjectPins = null;
   ElectricCase   currentCase       = null;
   ElectricObject currentElectricObject = null;

   public static Object2Case createInstance(_dbElectricObject _object, _dbElectricCase _electricCase )
   {
    return _dbObject2Case.createInstance(  _object,0,  _electricCase, 0 );
   }
   
   /**
    *  Method:      findByElectricCase(_dbElectricCase _electricCase)
    *  Description: 
    *  Returns:     ArrayList<Object2Case>
    */
   public static Object2Case findByKey(ElectricCase _electricCase, ElectricObject _electricObject)
   {
    SaveStatement  stmt;
    Object2Case    result=null;
    try
    {
      stmt  = ConnectionManager.getValid().createStatement("_dbObject2Case.findByElectricCase");
      try
      {
        ResultSet s = stmt.executeQuery( "SELECT object_id, y, electricCase_id, x, id FROM Object2Case WHERE electricCase_id='"+toSQL(((_electricCase==null)?"":_electricCase.getId()))+"' AND object_id='"+toSQL(((_electricObject==null)?"":_electricObject.getId()))+"'" );
        if(s.next())
        {
          result = new Object2Case();
          result.object_id=s.getString(1);
          result.y=s.getInt(2);
          result.electricCase_id=s.getString(3);
          result.x=s.getInt(4);
          result.id=s.getString(5);
        }
      }
      catch(Exception exc)
      {
        Trace.error(exc);
      }
      stmt.close();
    }
    catch (Exception ex)
    {
      Trace.error(ex);
    }
    return result;
   }
   
   /**
    * returns all pins of the object. This request MUST be cached. The request must be return always the same
    * objects. This is required for the Transformation function from DigiSim->real world objects.
    *  
    * @return
    */
   public ArrayList getObjectPins()
   {
        if(currentObjectPins!=null)
            return currentObjectPins;

        return super.getObjectPin2CasePins();
   }

   protected void reserveResources(ElectricCase ecase)
   {
//        System.out.println("reserve "+getClass().getName()+"@"+this.hashCode());
      currentCase = ecase;
      currentElectricObject = this.getObject();
      currentElectricObject.reserveResources(ecase, this);
      currentObjectPins = super.getObjectPin2CasePins();
      Iterator iter = currentObjectPins.iterator();
      while(iter.hasNext())
      {
         ObjectPin2CasePin objectPin= (ObjectPin2CasePin)iter.next();
         objectPin.reserveResources(this);
      }
   }

   protected ElectricCase getCurrentElectricCase()
   {
        return currentCase;
   }
   public ElectricObject getCurrentElectricObject()
   {
        return currentElectricObject;
   }
//

    public String toString()
    {
        return "["+super.toString()+"]@"+ this.hashCode();
    }

    public ObjectPin2CasePin getPin(long number)
    {
        Iterator iter = getObjectPins().iterator();
        while(iter.hasNext())
        {
            ObjectPin2CasePin opin= (ObjectPin2CasePin)iter.next();
            if(opin.getObjectPin().getNumber()==number)
                return opin;
        }
        return null;
    }

}
