package de.freegroup.digitalsimulator.export.wired.db;

/**
 * Class generated by automatic ClassGenerator
 * Date: Mon Feb 02 16:30:54 CET 2004
 */
import de.freegroup.digitalsimulator.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;
import de.freegroup.digitalsimulator.Trace;

class _dbObject2Case extends dbObject 
{

	String    object_id;	// Foreign Key pointing to Table [ElectricObject], Field [id]
	int       y;
	String    electricCase_id;	// Foreign Key pointing to Table [ElectricCase], Field [id]
	int       x;
	String    id;	// Key


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbObject2Case.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Object2Case WHERE id='"+_key+"'");
					result = true;
					id     = null;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}



	/**
	 * Method:      getY()
	 * Description: 
	 * Returns:     int
	 */
	public int getY()
	{
		return y;
	}

	/**
	 * Method:      setY(int _y, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setY(int _y, boolean _autoCommit)
	{
		y=_y;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getX()
	 * Description: 
	 * Returns:     int
	 */
	public int getX()
	{
		return x;
	}

	/**
	 * Method:      setX(int _x, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setX(int _x, boolean _autoCommit)
	{
		x=_x;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getObject()
	 * Description: 
	 * Returns:     ElectricObject
	 */
	public ElectricObject getObject()
	{
		return ElectricObject.findById(object_id);
	}

	/**
	 * Method:      setObject()
	 * Description: 
	 * Returns:     void
	 */
	public void setObject(ElectricObject _foreigner, boolean _autocommit)
	{
		object_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 * Method:      getElectricCase()
	 * Description: 
	 * Returns:     ElectricCase
	 */
	public ElectricCase getElectricCase()
	{
		return ElectricCase.findById(electricCase_id);
	}

	/**
	 * Method:      setElectricCase()
	 * Description: 
	 * Returns:     void
	 */
	public void setElectricCase(ElectricCase _foreigner, boolean _autocommit)
	{
		electricCase_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      getObjectPin2CasePins()
	 *  Description:                              
	 *  Returns:     ArrayList<ObjectPin2CasePin>
	 */
	public ArrayList getObjectPin2CasePins()
	{
		return _dbObjectPin2CasePin.findByObject2Case(this);
	}


	/**
	 *  Method:      findByObject(_dbElectricObject _object)
	 *  Description: 
	 *  Returns:     ArrayList<Object2Case>
	 */
	public static ArrayList findByObject(_dbElectricObject _object)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbObject2Case.findByObject");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT object_id, y, electricCase_id, x, id FROM Object2Case WHERE object_id='"+toSQL(((_object==null)?"":_object.getId()))+"'");
				while(s.next())
				{
					Object2Case newObject = new Object2Case();
					newObject.object_id=s.getString(1);
					newObject.y=s.getInt(2);
					newObject.electricCase_id=s.getString(3);
					newObject.x=s.getInt(4);
					newObject.id=s.getString(5);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByY(int _y)
	 *  Description: 
	 *  Returns:     ArrayList<Object2Case>
	 */
	public static ArrayList findByY(int _y)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbObject2Case.findByY");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT object_id, y, electricCase_id, x, id FROM Object2Case WHERE y="+_y);
				while(s.next())
				{
					Object2Case newObject = new Object2Case();
					newObject.object_id=s.getString(1);
					newObject.y=s.getInt(2);
					newObject.electricCase_id=s.getString(3);
					newObject.x=s.getInt(4);
					newObject.id=s.getString(5);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByElectricCase(_dbElectricCase _electricCase)
	 *  Description: 
	 *  Returns:     ArrayList<Object2Case>
	 */
	public static ArrayList findByElectricCase(_dbElectricCase _electricCase)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbObject2Case.findByElectricCase");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT object_id, y, electricCase_id, x, id FROM Object2Case WHERE electricCase_id='"+toSQL(((_electricCase==null)?"":_electricCase.getId()))+"'");
				while(s.next())
				{
					Object2Case newObject = new Object2Case();
					newObject.object_id=s.getString(1);
					newObject.y=s.getInt(2);
					newObject.electricCase_id=s.getString(3);
					newObject.x=s.getInt(4);
					newObject.id=s.getString(5);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByX(int _x)
	 *  Description: 
	 *  Returns:     ArrayList<Object2Case>
	 */
	public static ArrayList findByX(int _x)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbObject2Case.findByX");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT object_id, y, electricCase_id, x, id FROM Object2Case WHERE x="+_x);
				while(s.next())
				{
					Object2Case newObject = new Object2Case();
					newObject.object_id=s.getString(1);
					newObject.y=s.getInt(2);
					newObject.electricCase_id=s.getString(3);
					newObject.x=s.getInt(4);
					newObject.id=s.getString(5);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     Object2Case
	 */
	public static Object2Case findById(String _id)
	{
		Object2Case result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbObject2Case.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT object_id, y, electricCase_id, x, id FROM Object2Case WHERE id='"+toSQL(_id)+"'");
				if(s.next())
				{
					result = new Object2Case();
					result.object_id= s.getString(1);
					result.y= s.getInt(2);
					result.electricCase_id= s.getString(3);
					result.x= s.getInt(4);
					result.id= s.getString(5);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbObject2Case.commit");
			try
			{
				stmt.executeUpdate( "UPDATE Object2Case set object_id= '"+toSQL(object_id)+"', y= "+y+", electricCase_id= '"+toSQL(electricCase_id)+"', x= "+x+" WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return true;
	}


	/**
	 * returns ArrayList<Object2Case>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbObject2Case.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT object_id, y, electricCase_id, x, id FROM Object2Case");
				while(s.next())
				{
					Object2Case newObject = new Object2Case();
					newObject.object_id=s.getString(1);
					newObject.y=s.getInt(2);
					newObject.electricCase_id=s.getString(3);
					newObject.x=s.getInt(4);
					newObject.id=s.getString(5);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public Object2Case createInstance( _dbElectricObject _object, int  _y, _dbElectricCase _electricCase, int  _x )
	{
		Object2Case result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbObject2Case.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Object2Case ( object_id, y, electricCase_id, x, id) VALUES ( '"+((_object==null)?"":_object.getId())+"', "+_y+",  '"+((_electricCase==null)?"":_electricCase.getId())+"', "+_x+", '"+nextGUID+"')");
				result = new Object2Case();
				result.object_id= (_object==null)?"":_object.getId();
				result.y= _y;
				result.electricCase_id= (_electricCase==null)?"":_electricCase.getId();
				result.x= _x;
				result.id= nextGUID;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( _dbElectricObject _object, int  _y, _dbElectricCase _electricCase, int  _x )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbObject2Case.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Object2Case ( object_id, y, electricCase_id, x, id) VALUES ( '"+((_object==null)?"":_object.getId())+"', "+_y+",  '"+((_electricCase==null)?"":_electricCase.getId())+"', "+_x+", '"+nextGUID+"')");
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbObject2Case.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Object2Case WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbObject2Case.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from Object2Case" );
					result = true;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(object_id);
		result.append("|");
		result.append(y);
		result.append("|");
		result.append(electricCase_id);
		result.append("|");
		result.append(x);
		result.append("|");
		result.append(id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
	}


}
