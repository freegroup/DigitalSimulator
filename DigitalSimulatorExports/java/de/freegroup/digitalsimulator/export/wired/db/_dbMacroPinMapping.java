package de.freegroup.digitalsimulator.export.wired.db;

/**
 * Class generated by automatic ClassGenerator
 * Date: Mon Feb 02 16:30:54 CET 2004
 */
import de.freegroup.digitalsimulator.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;
import de.freegroup.digitalsimulator.Trace;

class _dbMacroPinMapping extends dbObject 
{

	long      electricObjectPinNum;
	long      relatedObjectPinNum;
	String    electricObject_id;	// Foreign Key pointing to Table [ElectricObject], Field [id]
	String    id;	// Key
	String    relatedObject_id;	// Foreign Key pointing to Table [RelatedObject], Field [id]


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbMacroPinMapping.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM MacroPinMapping WHERE id='"+_key+"'");
					result = true;
					id     = null;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}



	/**
	 * Method:      getElectricObjectPinNum()
	 * Description: 
	 * Returns:     long
	 */
	public long getElectricObjectPinNum()
	{
		return electricObjectPinNum;
	}

	/**
	 * Method:      setElectricObjectPinNum(long _electricObjectPinNum, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setElectricObjectPinNum(long _electricObjectPinNum, boolean _autoCommit)
	{
		electricObjectPinNum=_electricObjectPinNum;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getRelatedObjectPinNum()
	 * Description: 
	 * Returns:     long
	 */
	public long getRelatedObjectPinNum()
	{
		return relatedObjectPinNum;
	}

	/**
	 * Method:      setRelatedObjectPinNum(long _relatedObjectPinNum, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setRelatedObjectPinNum(long _relatedObjectPinNum, boolean _autoCommit)
	{
		relatedObjectPinNum=_relatedObjectPinNum;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getElectricObject()
	 * Description: 
	 * Returns:     ElectricObject
	 */
	public ElectricObject getElectricObject()
	{
		return ElectricObject.findById(electricObject_id);
	}

	/**
	 * Method:      setElectricObject()
	 * Description: 
	 * Returns:     void
	 */
	public void setElectricObject(ElectricObject _foreigner, boolean _autocommit)
	{
		electricObject_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 * Method:      getRelatedObject()
	 * Description: 
	 * Returns:     RelatedObject
	 */
	public RelatedObject getRelatedObject()
	{
		return RelatedObject.findById(relatedObject_id);
	}

	/**
	 * Method:      setRelatedObject()
	 * Description: 
	 * Returns:     void
	 */
	public void setRelatedObject(RelatedObject _foreigner, boolean _autocommit)
	{
		relatedObject_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      findByElectricObjectPinNum(long _electricObjectPinNum)
	 *  Description: 
	 *  Returns:     ArrayList<MacroPinMapping>
	 */
	public static ArrayList findByElectricObjectPinNum(long _electricObjectPinNum)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbMacroPinMapping.findByElectricObjectPinNum");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT electricObjectPinNum, relatedObjectPinNum, electricObject_id, id, relatedObject_id FROM MacroPinMapping WHERE electricObjectPinNum="+_electricObjectPinNum);
				while(s.next())
				{
					MacroPinMapping newObject = new MacroPinMapping();
					newObject.electricObjectPinNum=s.getLong(1);
					newObject.relatedObjectPinNum=s.getLong(2);
					newObject.electricObject_id=s.getString(3);
					newObject.id=s.getString(4);
					newObject.relatedObject_id=s.getString(5);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByRelatedObjectPinNum(long _relatedObjectPinNum)
	 *  Description: 
	 *  Returns:     ArrayList<MacroPinMapping>
	 */
	public static ArrayList findByRelatedObjectPinNum(long _relatedObjectPinNum)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbMacroPinMapping.findByRelatedObjectPinNum");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT electricObjectPinNum, relatedObjectPinNum, electricObject_id, id, relatedObject_id FROM MacroPinMapping WHERE relatedObjectPinNum="+_relatedObjectPinNum);
				while(s.next())
				{
					MacroPinMapping newObject = new MacroPinMapping();
					newObject.electricObjectPinNum=s.getLong(1);
					newObject.relatedObjectPinNum=s.getLong(2);
					newObject.electricObject_id=s.getString(3);
					newObject.id=s.getString(4);
					newObject.relatedObject_id=s.getString(5);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByElectricObject(_dbElectricObject _electricObject)
	 *  Description: 
	 *  Returns:     ArrayList<MacroPinMapping>
	 */
	public static ArrayList findByElectricObject(_dbElectricObject _electricObject)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbMacroPinMapping.findByElectricObject");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT electricObjectPinNum, relatedObjectPinNum, electricObject_id, id, relatedObject_id FROM MacroPinMapping WHERE electricObject_id='"+toSQL(((_electricObject==null)?"":_electricObject.getId()))+"'");
				while(s.next())
				{
					MacroPinMapping newObject = new MacroPinMapping();
					newObject.electricObjectPinNum=s.getLong(1);
					newObject.relatedObjectPinNum=s.getLong(2);
					newObject.electricObject_id=s.getString(3);
					newObject.id=s.getString(4);
					newObject.relatedObject_id=s.getString(5);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     MacroPinMapping
	 */
	public static MacroPinMapping findById(String _id)
	{
		MacroPinMapping result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbMacroPinMapping.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT electricObjectPinNum, relatedObjectPinNum, electricObject_id, id, relatedObject_id FROM MacroPinMapping WHERE id='"+toSQL(_id)+"'");
				if(s.next())
				{
					result = new MacroPinMapping();
					result.electricObjectPinNum= s.getLong(1);
					result.relatedObjectPinNum= s.getLong(2);
					result.electricObject_id= s.getString(3);
					result.id= s.getString(4);
					result.relatedObject_id= s.getString(5);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByRelatedObject(_dbRelatedObject _relatedObject)
	 *  Description: 
	 *  Returns:     ArrayList<MacroPinMapping>
	 */
	public static ArrayList findByRelatedObject(_dbRelatedObject _relatedObject)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbMacroPinMapping.findByRelatedObject");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT electricObjectPinNum, relatedObjectPinNum, electricObject_id, id, relatedObject_id FROM MacroPinMapping WHERE relatedObject_id='"+toSQL(((_relatedObject==null)?"":_relatedObject.getId()))+"'");
				while(s.next())
				{
					MacroPinMapping newObject = new MacroPinMapping();
					newObject.electricObjectPinNum=s.getLong(1);
					newObject.relatedObjectPinNum=s.getLong(2);
					newObject.electricObject_id=s.getString(3);
					newObject.id=s.getString(4);
					newObject.relatedObject_id=s.getString(5);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbMacroPinMapping.commit");
			try
			{
				stmt.executeUpdate( "UPDATE MacroPinMapping set electricObjectPinNum= "+electricObjectPinNum+", relatedObjectPinNum= "+relatedObjectPinNum+", electricObject_id= '"+toSQL(electricObject_id)+"', relatedObject_id= '"+toSQL(relatedObject_id)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return true;
	}


	/**
	 * returns ArrayList<MacroPinMapping>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbMacroPinMapping.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT electricObjectPinNum, relatedObjectPinNum, electricObject_id, id, relatedObject_id FROM MacroPinMapping");
				while(s.next())
				{
					MacroPinMapping newObject = new MacroPinMapping();
					newObject.electricObjectPinNum=s.getLong(1);
					newObject.relatedObjectPinNum=s.getLong(2);
					newObject.electricObject_id=s.getString(3);
					newObject.id=s.getString(4);
					newObject.relatedObject_id=s.getString(5);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public MacroPinMapping createInstance( long  _electricObjectPinNum, long  _relatedObjectPinNum, _dbElectricObject _electricObject, _dbRelatedObject _relatedObject )
	{
		MacroPinMapping result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbMacroPinMapping.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO MacroPinMapping ( electricObjectPinNum, relatedObjectPinNum, electricObject_id, id, relatedObject_id) VALUES ("+_electricObjectPinNum+", "+_relatedObjectPinNum+",  '"+((_electricObject==null)?"":_electricObject.getId())+"', '"+nextGUID+"',  '"+((_relatedObject==null)?"":_relatedObject.getId())+"')");
				result = new MacroPinMapping();
				result.electricObjectPinNum= _electricObjectPinNum;
				result.relatedObjectPinNum= _relatedObjectPinNum;
				result.electricObject_id= (_electricObject==null)?"":_electricObject.getId();
				result.id= nextGUID;
				result.relatedObject_id= (_relatedObject==null)?"":_relatedObject.getId();
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( long  _electricObjectPinNum, long  _relatedObjectPinNum, _dbElectricObject _electricObject, _dbRelatedObject _relatedObject )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbMacroPinMapping.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO MacroPinMapping ( electricObjectPinNum, relatedObjectPinNum, electricObject_id, id, relatedObject_id) VALUES ("+_electricObjectPinNum+", "+_relatedObjectPinNum+",  '"+((_electricObject==null)?"":_electricObject.getId())+"', '"+nextGUID+"',  '"+((_relatedObject==null)?"":_relatedObject.getId())+"')");
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbMacroPinMapping.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM MacroPinMapping WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbMacroPinMapping.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from MacroPinMapping" );
					result = true;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(electricObjectPinNum);
		result.append("|");
		result.append(relatedObjectPinNum);
		result.append("|");
		result.append(electricObject_id);
		result.append("|");
		result.append(id);
		result.append("|");
		result.append(relatedObject_id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
	}


}
