package de.freegroup.digitalsimulator.export.wired.db;

/**
 * Class generated by automatic ClassGenerator
 * Date: Fri Oct 04 16:35:33 GMT+02:00 2002
 */
import de.freegroup.digitalsimulator.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;
import Trace;

class _dbElectricCase extends dbObject 
{

	String    name;
	String    descriptionURL;
	String    caseLayout_id;	// Foreign Key pointing to Table [CaseLayout], Field [id]
	String    id;	// Key


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM ElectricCase WHERE id='"+_key+"'");
					result = true;
					id     = null;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}



	/**
	 * Method:      getName()
	 * Description: 
	 * Returns:     String
	 */
	public String getName()
	{
		return name;
	}

	/**
	 * Method:      setName(String _name, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setName(String _name, boolean _autoCommit)
	{
		name=_name;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getDescriptionURL()
	 * Description: 
	 * Returns:     String
	 */
	public String getDescriptionURL()
	{
		return descriptionURL;
	}

	/**
	 * Method:      setDescriptionURL(String _descriptionURL, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setDescriptionURL(String _descriptionURL, boolean _autoCommit)
	{
		descriptionURL=_descriptionURL;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getCaseLayout()
	 * Description: 
	 * Returns:     CaseLayout
	 */
	public CaseLayout getCaseLayout()
	{
		return CaseLayout.findById(caseLayout_id);
	}

	/**
	 * Method:      setCaseLayout()
	 * Description: 
	 * Returns:     void
	 */
	public void setCaseLayout(CaseLayout _foreigner, boolean _autocommit)
	{
		caseLayout_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      getCaseDependencies()
	 *  Description:                              
	 *  Returns:     ArrayList<CaseDependency>
	 */
	public ArrayList getCaseDependencies()
	{
		return _dbCaseDependency.findByElectricCase(this);
	}


	/**
	 *  Method:      getObject2Cases()
	 *  Description:                              
	 *  Returns:     ArrayList<Object2Case>
	 */
	public ArrayList getObject2Cases()
	{
		return _dbObject2Case.findByElectricCase(this);
	}


	/**
	 *  Method:      findByName(String _name)
	 *  Description: 
	 *  Returns:     ArrayList<ElectricCase>
	 */
	public static ArrayList findByName(String _name)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.findByName");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT name, descriptionURL, caseLayout_id, id FROM ElectricCase WHERE name='"+toSQL(_name)+"'");
				while(s.next())
				{
					ElectricCase newObject = new ElectricCase();
					newObject.name=s.getString(1);
					newObject.descriptionURL=s.getString(2);
					newObject.caseLayout_id=s.getString(3);
					newObject.id=s.getString(4);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByDescriptionURL(String _descriptionURL)
	 *  Description: 
	 *  Returns:     ArrayList<ElectricCase>
	 */
	public static ArrayList findByDescriptionURL(String _descriptionURL)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.findByDescriptionURL");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT name, descriptionURL, caseLayout_id, id FROM ElectricCase WHERE descriptionURL='"+toSQL(_descriptionURL)+"'");
				while(s.next())
				{
					ElectricCase newObject = new ElectricCase();
					newObject.name=s.getString(1);
					newObject.descriptionURL=s.getString(2);
					newObject.caseLayout_id=s.getString(3);
					newObject.id=s.getString(4);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByCaseLayout(_dbCaseLayout _caseLayout)
	 *  Description: 
	 *  Returns:     ArrayList<ElectricCase>
	 */
	public static ArrayList findByCaseLayout(_dbCaseLayout _caseLayout)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.findByCaseLayout");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT name, descriptionURL, caseLayout_id, id FROM ElectricCase WHERE caseLayout_id='"+toSQL(((_caseLayout==null)?"":_caseLayout.getId()))+"'");
				while(s.next())
				{
					ElectricCase newObject = new ElectricCase();
					newObject.name=s.getString(1);
					newObject.descriptionURL=s.getString(2);
					newObject.caseLayout_id=s.getString(3);
					newObject.id=s.getString(4);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     ElectricCase
	 */
	public static ElectricCase findById(String _id)
	{
		ElectricCase result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT name, descriptionURL, caseLayout_id, id FROM ElectricCase WHERE id='"+toSQL(_id)+"'");
				if(s.next())
				{
					result = new ElectricCase();
					result.name= s.getString(1);
					result.descriptionURL= s.getString(2);
					result.caseLayout_id= s.getString(3);
					result.id= s.getString(4);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.commit");
			try
			{
				stmt.executeUpdate( "UPDATE ElectricCase set name= '"+toSQL(name)+"', descriptionURL= '"+toSQL(descriptionURL)+"', caseLayout_id= '"+toSQL(caseLayout_id)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return true;
	}


	/**
	 * returns ArrayList<ElectricCase>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT name, descriptionURL, caseLayout_id, id FROM ElectricCase");
				while(s.next())
				{
					ElectricCase newObject = new ElectricCase();
					newObject.name=s.getString(1);
					newObject.descriptionURL=s.getString(2);
					newObject.caseLayout_id=s.getString(3);
					newObject.id=s.getString(4);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public ElectricCase createInstance( String  _name, String  _descriptionURL, _dbCaseLayout _caseLayout )
	{
		ElectricCase result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO ElectricCase ( name, descriptionURL, caseLayout_id, id) VALUES ( '"+toSQL(_name)+"',  '"+toSQL(_descriptionURL)+"',  '"+((_caseLayout==null)?"":_caseLayout.getId())+"', '"+nextGUID+"')");
				result = new ElectricCase();
				result.name= _name;
				result.descriptionURL= _descriptionURL;
				result.caseLayout_id= (_caseLayout==null)?"":_caseLayout.getId();
				result.id= nextGUID;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( String  _name, String  _descriptionURL, _dbCaseLayout _caseLayout )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO ElectricCase ( name, descriptionURL, caseLayout_id, id) VALUES ( '"+toSQL(_name)+"',  '"+toSQL(_descriptionURL)+"',  '"+((_caseLayout==null)?"":_caseLayout.getId())+"', '"+nextGUID+"')");
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM ElectricCase WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricCase.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from ElectricCase" );
					result = true;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(name);
		result.append("|");
		result.append(descriptionURL);
		result.append("|");
		result.append(caseLayout_id);
		result.append("|");
		result.append(id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
	}


}
