package de.freegroup.digitalsimulator.export.wired.db;

/**
 * Class generated by automatic ClassGenerator
 * Date: Fri Oct 04 16:35:32 GMT+02:00 2002
 */
import de.freegroup.digitalsimulator.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;
import Trace;

class _dbElectricObject extends dbObject 
{

	int       isSingelton;
	String    type;
	String    id;	// Key


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM ElectricObject WHERE id='"+_key+"'");
					result = true;
					id     = null;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}



	/**
	 * Method:      getIsSingelton()
	 * Description: 
	 * Returns:     int
	 */
	public int getIsSingelton()
	{
		return isSingelton;
	}

	/**
	 * Method:      setIsSingelton(int _isSingelton, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setIsSingelton(int _isSingelton, boolean _autoCommit)
	{
		isSingelton=_isSingelton;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getType()
	 * Description: 
	 * Returns:     String
	 */
	public String getType()
	{
		return type;
	}

	/**
	 * Method:      setType(String _type, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setType(String _type, boolean _autoCommit)
	{
		type=_type;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 *  Method:      getCaseDependencies()
	 *  Description:                              
	 *  Returns:     ArrayList<CaseDependency>
	 */
	public ArrayList getCaseDependencies()
	{
		return _dbCaseDependency.findByObject(this);
	}


	/**
	 *  Method:      getMacroPinMappings()
	 *  Description:                              
	 *  Returns:     ArrayList<MacroPinMapping>
	 */
	public ArrayList getMacroPinMappings()
	{
		return _dbMacroPinMapping.findByElectricObject(this);
	}


	/**
	 *  Method:      getObject2Cases()
	 *  Description:                              
	 *  Returns:     ArrayList<Object2Case>
	 */
	public ArrayList getObject2Cases()
	{
		return _dbObject2Case.findByObject(this);
	}


	/**
	 *  Method:      findByIsSingelton(int _isSingelton)
	 *  Description: 
	 *  Returns:     ArrayList<ElectricObject>
	 */
	public static ArrayList findByIsSingelton(int _isSingelton)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.findByIsSingelton");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT isSingelton, type, id FROM ElectricObject WHERE isSingelton="+_isSingelton);
				while(s.next())
				{
					ElectricObject newObject = new ElectricObject();
					newObject.isSingelton=s.getInt(1);
					newObject.type=s.getString(2);
					newObject.id=s.getString(3);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByType(String _type)
	 *  Description: 
	 *  Returns:     ElectricObject
	 */
	public static ElectricObject findByType(String _type)
	{
		ElectricObject result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.findByType");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT isSingelton, type, id FROM ElectricObject WHERE type='"+toSQL(_type)+"'");
				if(s.next())
				{
					result = new ElectricObject();
					result.isSingelton= s.getInt(1);
					result.type= s.getString(2);
					result.id= s.getString(3);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     ElectricObject
	 */
	public static ElectricObject findById(String _id)
	{
		ElectricObject result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT isSingelton, type, id FROM ElectricObject WHERE id='"+toSQL(_id)+"'");
				if(s.next())
				{
					result = new ElectricObject();
					result.isSingelton= s.getInt(1);
					result.type= s.getString(2);
					result.id= s.getString(3);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.commit");
			try
			{
				stmt.executeUpdate( "UPDATE ElectricObject set isSingelton= "+isSingelton+", type= '"+toSQL(type)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return true;
	}


	/**
	 * returns ArrayList<ElectricObject>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT isSingelton, type, id FROM ElectricObject");
				while(s.next())
				{
					ElectricObject newObject = new ElectricObject();
					newObject.isSingelton=s.getInt(1);
					newObject.type=s.getString(2);
					newObject.id=s.getString(3);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public ElectricObject createInstance( int  _isSingelton, String  _type )
	{
		ElectricObject result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO ElectricObject ( isSingelton, type, id) VALUES ("+_isSingelton+",  '"+toSQL(_type)+"', '"+nextGUID+"')");
				result = new ElectricObject();
				result.isSingelton= _isSingelton;
				result.type= _type;
				result.id= nextGUID;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( int  _isSingelton, String  _type )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO ElectricObject ( isSingelton, type, id) VALUES ("+_isSingelton+",  '"+toSQL(_type)+"', '"+nextGUID+"')");
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM ElectricObject WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbElectricObject.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from ElectricObject" );
					result = true;
			}
			catch(Exception exc)
			{
				Trace.error(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			Trace.error(ex);
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(isSingelton);
		result.append("|");
		result.append(type);
		result.append("|");
		result.append(id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
	}


}
